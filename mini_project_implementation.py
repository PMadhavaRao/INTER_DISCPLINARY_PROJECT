# -*- coding: utf-8 -*-
"""MINI_PROJECT_IMPLEMENTATION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZGiEKH0oG4qGTClY0_uzjMcszU6qftt3
"""

# Step 1: Import required libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Step 2: Load and inspect the dataset
df = pd.read_csv("/content/Crop_recommendation (1).csv")  # Change path if needed

# Dataset overview
print("Dataset Shape:", df.shape)
print("Columns:", df.columns.tolist())

# First and last 5 rows
print("\nTop 5 Rows:\n", df.head())
print("\nLast 5 Rows:\n", df.tail())

# Step 3: Check for missing values and data types
print("\nMissing Values:\n", df.isnull().sum())
print("\nData Types:\n", df.dtypes)

# Step 4: Basic statistics and correlation
print("\nSummary Statistics:\n", df.describe())

# Step 5: Encode the target labels (crop names)
label_encoder = LabelEncoder()
df['label_encoded'] = label_encoder.fit_transform(df['label'])

# Features and target
X = df[['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']]
y = df['label_encoded']

# Step 6: Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"\nTraining samples: {X_train.shape[0]}")
print(f"Testing samples: {X_test.shape[0]}")

# Step 7: Train the Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=200, random_state=42)
rf_model.fit(X_train, y_train)

print("\nModel training completed.")

# Step 8: Make predictions and evaluate
y_pred = rf_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"\nAccuracy: {accuracy * 100:.2f}%")

# Detailed classification report
print("\nClassification Report:\n")
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

# Step 9: Predict function for new inputs
def recommend_crop(N, P, K, temperature, humidity, ph, rainfall):
    features = [[N, P, K, temperature, humidity, ph, rainfall]]
    prediction = rf_model.predict(features)[0]
    crop_name = label_encoder.inverse_transform([prediction])[0]
    return crop_name

# Example usage
recommended_crop = recommend_crop(-99, -44, 4, 25.0, 80.0, 6.5, 200.0)
print(f"\nâœ… Recommended Crop: {recommended_crop}")